name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      app_image: ${{ steps.check_app.outputs.image }}
      app_test_image: ${{ steps.check_app_test.outputs.image }}
      nginx_image: ${{ steps.check_nginx.outputs.image }}
      mongo_image: ${{ steps.check_mongo.outputs.image }}
      test_image: ${{ steps.check_test.outputs.image }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.MY_GITHUB_TOKEN }}

    - name: Check and build JS app
      id: check_app
      run: |
        if git diff --quiet HEAD^ HEAD -- app; then
          echo "No changes in app folder"
          echo "image=crxc0d3r/my-js-app:latest" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in app folder"
          docker build -t crxc0d3r/my-js-app:${{ github.sha }} -t crxc0d3r/my-js-app:latest .
          docker push crxc0d3r/my-js-app:${{ github.sha }}
          docker push crxc0d3r/my-js-app:latest
          echo "image=crxc0d3r/my-js-app:${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Check and build JS app test
      id: check_app_test
      run: |
        if git diff --quiet HEAD^ HEAD -- app_test; then
          echo "No changes in app_test folder"
          echo "image=ghcr.io/0xcryp70/my-js-app-test:latest" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in app_test folder"
          docker build -t ghcr.io/0xcryp70/my-js-app-test:${{ github.sha }} -t ghcr.io/0xcryp70/my-js-app-test:latest -f Dockerfile.beta .
          docker push ghcr.io/0xcryp70/my-js-app-test:${{ github.sha }}
          docker push ghcr.io/0xcryp70/my-js-app-test:latest
          echo "image=ghcr.io/0xcryp70/my-js-app-test:${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Check and build Nginx
      id: check_nginx
      run: |
        if git diff --quiet HEAD^ HEAD -- Dockerfile.nginx nginx.conf; then
          echo "No changes in Nginx configuration"
          echo "image=crxc0d3r/my-nginx:latest" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in Nginx configuration"
          docker build -t crxc0d3r/my-nginx:${{ github.sha }} -t crxc0d3r/my-nginx:latest -f Dockerfile.nginx .
          docker push crxc0d3r/my-nginx:${{ github.sha }}
          docker push crxc0d3r/my-nginx:latest
          echo "image=crxc0d3r/my-nginx:${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Check and build MongoDB
      id: check_mongo
      run: |
        if git diff --quiet HEAD^ HEAD -- Dockerfile.mongodb; then
          echo "No changes in MongoDB configuration"
          echo "image=ghcr.io/0xcryp70/my-mongodb:latest" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in MongoDB configuration"
          docker build -t ghcr.io/0xcryp70/my-mongodb:${{ github.sha }} -t ghcr.io/0xcryp70/my-mongodb:latest -f Dockerfile.mongodb .
          docker push ghcr.io/0xcryp70/my-mongodb:${{ github.sha }}
          docker push ghcr.io/0xcryp70/my-mongodb:latest
          echo "image=ghcr.io/0xcryp70/my-mongodb:${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Check and build Test container
      id: check_test
      run: |
        if git diff --quiet HEAD^ HEAD -- Dockerfile.test; then
          echo "No changes in Test container configuration"
          echo "image=ghcr.io/0xcryp70/my-test-container:latest" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in Test container configuration"
          docker build -t ghcr.io/0xcryp70/my-test-container:${{ github.sha }} -t ghcr.io/0xcryp70/my-test-container:latest -f Dockerfile.test .
          docker push ghcr.io/0xcryp70/my-test-container:${{ github.sha }}
          docker push ghcr.io/0xcryp70/my-test-container:latest
          echo "image=ghcr.io/0xcryp70/my-test-container:${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.MY_GITHUB_TOKEN }}

    - name: Create Docker network
      run: docker network create my-network

    - name: Pull and Run Docker containers
      run: |
        docker pull ${{ needs.build.outputs.mongo_image }}
        docker run -d --network my-network --name my-mongodb ${{ needs.build.outputs.mongo_image }}
        docker pull ${{ needs.build.outputs.app_image }}
        docker pull ${{ needs.build.outputs.nginx_image }}
        docker pull ${{ needs.build.outputs.app_test_image }}
        docker pull ${{ needs.build.outputs.test_image }}
        docker run -d --network my-network --name my-js-app ${{ needs.build.outputs.app_image }}
        docker run -d --network my-network --name my-js-app-test ${{ needs.build.outputs.app_test_image }}
        docker run -d --network my-network --name my-test-container ${{ needs.build.outputs.test_image }}
        docker run -d --network my-network --name my-nginx-container ${{ needs.build.outputs.nginx_image }}

        
    - name: Wait for services to start
      run: sleep 21  # Adjust this time if your services take longer to start

    - name: Test Nginx configuration
      run: |
        docker exec my-nginx-container nginx -t
        if [ $? -eq 0 ]; then
          echo "Nginx configuration test passed"
        else
          echo "Nginx configuration test failed" >&2
          exit 1
        fi

    - name: Test if JavaScript app is responding on port 8080
      run: |
         docker exec my-nginx-container bash -c '
           response=$(curl -s http://my-js-app:8080)
           if [[ $response == *"<!DOCTYPE html>"* ]] || [[ $response == *"<html"* ]]; then
             echo "JavaScript app detected on port 8080"
           else
             echo "No JavaScript app detected on port 8080" >&2
             exit 1
           fi
         '

    - name: Test if JavaScript app test container is responding on port 8181
      run: |
         docker exec my-nginx-container bash -c '
           response=$(curl -s http://my-js-app-test:8181)
           if [[ $response == *"<!DOCTYPE html>"* ]] || [[ $response == *"<html"* ]]; then
             echo "JavaScript app test container detected on port 8181"
           else
             echo "No JavaScript app detected in test container" >&2
             exit 1
           fi
         '

    - name: Test if Test container is responding
      run: |
         docker exec my-nginx-container bash -c '
           response=$(curl -s http://my-test-container:3002)
           if [[ $response == *"<!DOCTYPE html>"* ]] || [[ $response == *"<html"* ]]; then
             echo "Test container detected on port 8282"
           else
             echo "No Test container detected" >&2
             exit 1
           fi
         '

    - name: Cleanup
      run: |
        docker stop my-js-app my-nginx-container my-js-app-test my-mongodb my-test-container
        docker rm my-js-app my-nginx-container my-js-app-test my-mongodb my-test-container
        docker network rm my-network

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy Kubernetes manifests to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          scp -i ssh_key -o StrictHostKeyChecking=no -r appkube/* root@$SERVER_IP:/home/config/
          rm ssh_key

      - name: Deploy to K3s
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GITHUB_USERNAME: ${{ secrets.MY_GITHUB_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          APP_IMAGE: ${{ needs.build.outputs.app_image }}
          APP_TEST_IMAGE: ${{ needs.build.outputs.app_test_image }}
          NGINX_IMAGE: ${{ needs.build.outputs.nginx_image }}
          MONGO_IMAGE: ${{ needs.build.outputs.mongo_image }}
          TEST_IMAGE: ${{ needs.build.outputs.test_image }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          ssh -i ssh_key -o StrictHostKeyChecking=no root@$SERVER_IP "
            kubectl create namespace myapp --dry-run=client -o yaml | kubectl apply -f -

            # Create DockerHub registry secret
            kubectl create secret docker-registry docker-registry-secret \
              --docker-server=https://index.docker.io/v1/ \
              --docker-username=$DOCKER_USERNAME \
              --docker-password=$DOCKER_PASSWORD \
              --namespace=myapp \
              --dry-run=client -o yaml | kubectl apply -f -

            # Create GitHub Container registry secret
            kubectl create secret docker-registry github-registry-secret \
              --docker-server=https://ghcr.io \
              --docker-username=$GITHUB_USERNAME \
              --docker-password=$GITHUB_TOKEN \
              --namespace=myapp \
              --dry-run=client -o yaml | kubectl apply -f -

            # Update image tags in deployment files
            sed -i 's|crxc0d3r/my-js-app:latest|$APP_IMAGE|g' /home/config/deployment-js-app.yaml
            sed -i 's|ghcr.io/0xcryp70/my-js-app-test:latest|$APP_TEST_IMAGE|g' /home/config/deployment-js-app-test.yaml
            sed -i 's|crxc0d3r/my-nginx:latest|$NGINX_IMAGE|g' /home/config/deployment-nginx.yaml
            sed -i 's|ghcr.io/0xcryp70/my-mongodb:latest|$MONGO_IMAGE|g' /home/config/deployment-mongodb.yaml
            sed -i 's|ghcr.io/0xcryp70/my-test-container:latest|$TEST_IMAGE|g' /home/config/deployment-test.yaml

            kubectl apply -f /home/config/ -n myapp

            kubectl rollout status deployment/mongodb -n myapp
            kubectl rollout status deployment/my-js-app -n myapp
            kubectl rollout status deployment/my-js-app-test -n myapp
            kubectl rollout status deployment/nginx -n myapp
            kubectl rollout status deployment/mongoface -n myapp
            kubectl rollout status deployment/my-test-container -n myapp
          "
          rm ssh_key

      - name: Verify deployment
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > ssh_key
          chmod 600 ssh_key
          ssh -i ssh_key -o StrictHostKeyChecking=no root@$SERVER_IP "
            kubectl get pods -n myapp
            kubectl get services -n myapp
          "
          rm ssh_key